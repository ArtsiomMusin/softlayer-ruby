*2.2*
* Added a method to reboot servers.

*2.1.1*
* Virtual server upgrades no longer raise exceptions
* Formalized the RDoc documentation process.  Added overview and welcome documentation and changed the README so it directs folks to the new documentation.

*2.1.0*
* Began implementing a model framework that allows Ruby developers to work with elements in the SoftLayer API in a more object-oriented fashion. The first release of this framework includes the Ticket, VirtualServer, and BareMetalServer classes.

*2.0.1*
* Fix broken gem configparser dependency

*2.0.0*
* Switched the Ruby API client to use XML-RPC when calling the SoftLayer API rather than using the REST-like interface.
* Result limits are now specified using @result_limit(offset,limit)@.
The @result_offset@ API filter has been removed.
* The @object_mask@ call modifier no longer accepts Ruby structures. It accepts strings that are Object Masks in the "Extended Object Mask":http://sldn.softlayer.com/article/Object-Masks format.
* Changed the mechanism for obtaining services to include the Client class. This makes the Ruby API very similar to the API presented by the Python bindings. The old mechanism for obtaining services still works to preserve backward compatibility but you will receive deprecation warnings in debug mode.

*1.0.8*
* Set a default User-Agent string to be sent with all requests to SoftLayer API. Provide interface to set a custom User-Agent string.

*1.0.7*
* Calls to the @getObject@ method of any service should not take parameters. The gem now warns if you make this type of call and ignores the parameters. This prevents @SoftLayer_Virtual_Guest::getObject@ from accidentally creating (billable) VirtualServer instances.

*1.0.6*
* Make all API calls with either a @GET@ or a @POST@ as the HTTP verb.

*1.0.5*
* Fixed a bug where empty hashes and empty arrays would not generate meaningful object masks

*1.0.4*
* Fixed a bug where the @result_limit@ and @result_offset@ object filters were just not working.

*1.0.3*
* Added a request filter to add result limits to request. Submitted by JN. Thanks!

*1.0.2*
* We have some API routines that start with 'get' but expect arguments anyway. The code now uses HTTP POST to send requests for which the user has provided arguments regardless of the name of the routine.

*1.0*, *1.0.1*
* Initial release of the gem
