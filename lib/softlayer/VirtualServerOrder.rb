#
# Copyright (c) 2014 SoftLayer Technologies, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

module SoftLayer
  class VirtualServerOrder

    #--
    # Required Attributes
    # -------------------
    # The following attributes are required in order to successfully order
    # a virtual server
    #++

    # Fixnum, The number of virtual CPUs to include in the instance
    attr_accessor :cpus

    # Fixnum, The amount of RAM for the new server (specified in megabytes so 4096 is 4GB)
    attr_accessor :memory

    # String, The hostname to assign to the new server
    attr_accessor :hostname

    # String, The domain (i.e. softlayer.com) for the new server
    attr_accessor :domain

    #--
    # These two options are mutually exclusive. You must provide an operating system reference code, or an image
    # if you provide both, the image will override the os reference code
    #++

    # String, An OS reference code for the operating system to install on the virtual server
    attr_accessor :os_referenceCode

    # Fixnum, The id of a disk image to put on the newly created server
    attr_accessor :image_id

    #--
    # Optional attributes
    #++

    # Boolean,  If true, an hourly server will be ordered, otherwise a monthly server will be ordered
    attr_accessor :hourly

    # Boolean, If true the server will use a virtual hard drive, if false, data will be stored on a SAN disk
    attr_accessor :use_local_disk

    # String, short name of the data center that will house the new virtual server (e.g. "dal05" or "sea01")
    attr_accessor :datacenter

    # Boolean, If true, the virtual server will reside on dedicated hardware (single tennant) as opposed to a shared server (multi-tennant)
    attr_accessor :dedicated_host

    # Fixnum, The id of the public VLAN this server should join
    attr_accessor :public_vlan_id

    # Fixnum, The id of the private VLAN this server should join
    attr_accessor :private_vlan_id

    # Boolean, if true the order will create a Bare Metal Instance (that is a physical hardware server whose characteristics closely match the ones given in this order)
    attr_accessor :bare_metal

    # Array of Fixnum, Sizes (in gigabytes) of disks to attach to this server
    attr_accessor :disks

    # String, The URI of a post provisioning script to run on this server once it is created
    attr_accessor :post_provision_uri

    # Boolean, If true then the virtual server will only have a private network interface (and no public network interface)
    attr_accessor :private_network_only

    # Array of Strings, SSH keys to add to the root user's account.
    attr_accessor :ssh_keys

    # String, User metadata associated with the instance
    attr_accessor :user_metadata

    # Fixnum (Should be 0, 10, 100, or 1000), The maximum network interface card speed (in Mbps) for the new instance
    attr_accessor :max_nic_speed

    # Create a new order that works thorugh the given client connection
    def initialize (client)
      @softlayer_client = client
    end

    # Calls the SoftLayer API to verify that the template provided by this order is valid
    # This routine will return the order template generated by the API or will throw an exception
    #
    # This routine will not actually create a Virtual Server and will not affect billing.
    def verify()
      @softlayer_client["Virtual_Guest"].generateOrderTemplate(self.virtual_guest_template)
    end

    # Calls the SoftLayer API to place an order for a new virtual server based on the template in this
    # order. If this succeeds then you will be billed for the new Virtual Server.
    def place_order!()
      virtual_server_hash = @softlayer_client["Virtual_Guest"].createObject(self.virtual_guest_template)
      SoftLayer::VirtualServer.server_with_id(@softlayer_client, virtual_server_hash["id"]) if virtual_server_hash
    end

    # Return the order items in the virtual server package.
    def self.virtual_server_package_items(client)
      client['Product_Package'].object_mask("mask[description,capacity,prices.id,categories.id]").object_with_id(46).getItems()
    end

    protected

    # Returns a hash of the creation options formatted to be sent to
    # the SoftLayer API for either verification or completion
    def virtual_guest_template
      template = {
        "startCpus" => @cpus.to_i,
        "maxMemory" => @memory.to_i,
        "hostname" => @hostname,
        "domain" => @domain,

        # Note : for the values below, we want to use the constants "true" and "false" not nil
        # the nil value (while false to Ruby) will not translate to XML properly
        "localDiskFlag" => @use_local_disk ? true : false,
        "hourlyBillingFlag" => @hourly ? true : false
      }

      template["dedicatedAccountHostOnlyFlag"] = true if @dedicated_host
      template["privateNetworkOnlyFlag"] = true if @private_network_only

      template["datacenter"] = {"name" => @datacenter} if @datacenter
      template['userData'] = [{'value' => @user_metadata}] if @user_metadata
      template['networkComponents'] = [{'maxSpeed'=> @max_nic_speed}] if @max_nic_speed
      template['postInstallScriptUri'] = @post_provision_uri if @post_provision_uri
      template['sshKeys'] = @ssh_keys.collect { |ssh_key| {'id'=> ssh_key} } if @ssh_keys
      template['primaryNetworkComponent'] = { "networkVlan" => { "id" => @public_vlan_id.to_i } } if @public_vlan_id
      template["primaryBackendNetworkComponent"] = { "networkVlan" => {"id" => @private_vlan_id } } if @private_vlan_id

      if @image_id
          template["blockDeviceTemplateGroup"] = {"globalIdentifier" => @image_id}
      elsif @os_referenceCode
          template["operatingSystemReferenceCode"] = @os_referenceCode
      end

      if @disks
        template['blockDevices'] = []

        @disks.each_with_index do |disk, index|
          template['blockDevices'].push({"device" => "#{index}", "diskImage" => {"capacity" => disk}})
        end
      end

      template
    end

  end # class VirtualServerOrder
end # module SoftLayer
